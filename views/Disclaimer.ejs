<!DOCTYPE html>
<html dir="ltr" lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Tell the browser to be responsive to screen width -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- Favicon icon -->
    <!-- <link rel="icon" type="image/png" sizes="16x16" href="assets/images/favicon.png"> -->
    <title>
        <%- title %>
    </title>
    <!-- Custom CSS -->
    <link href="assets/libs/flot/css/float-chart.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="dist/css/style.min.css" rel="stylesheet">
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
<![endif]-->
    <link rel="stylesheet" type="text/css" href="assets/extra-libs/multicheck/multicheck.css">
    <link href="assets/libs/datatables.net-bs4/css/dataTables.bootstrap4.css" rel="stylesheet">
    <link href="dist/css/style.min.css" rel="stylesheet">
    <link rel="stylesheet" href="sweetAlert/sweetalert2.min.css">
    <link rel="stylesheet" type="text/css"
        href="https://ashaviglobal.com/agreement/template/dist/css/jquery.signature.css">
    <link rel="stylesheet" type="text/css"
        href="assets/libs/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css">
    <style type="text/css">
        .gap {
            text-align: center;
            background-color: #e2181870;

        }

        .thClass {
            font-size: 18px;
            font-weight: bold;
        }

        .disableClick {
            pointer-events: none;
        }

        .modal {
            padding: 0 !important;
        }

        .modal .modal-dialog {
            width: 100%;
            max-width: none;
            height: 100%;
            margin: 0;
        }

        .modal .modal-content {
            height: 100%;
            border: 0;
            border-radius: 0;
        }

        .modal .modal-body {
            overflow-y: auto;
        }

        /* Signature */
        .kbw-signature {
            width: 100%;
            height: 250px;
        }

        .signature canvas {
            width: 100% !important;
            height: auto;
        }

        /* #signature-pad{
    width: 400px;
    height: 200px;
} */


        /* Signature */
    </style>
</head>

<body>
    <!-- ============================================================== -->
    <!-- Preloader - style you can find in spinners.css -->
    <!-- ============================================================== -->
    <div class="preloader">
        <div class="lds-ripple">
            <div class="lds-pos"></div>
            <div class="lds-pos"></div>
        </div>
    </div>
    <!-- ============================================================== -->
    <!-- Main wrapper - style you can find in pages.scss -->
    <!-- ============================================================== -->
    <div id="main-wrapper">
        <!-- ============================================================== -->
        <!-- Topbar header - style you can find in pages.scss -->
        <!-- ============================================================== -->

        <%- include('includes/header.ejs') %>
            <%- include('includes/sidebarDriver.ejs') %>

                <!-- Page wrapper  -->
                <!-- ============================================================== -->
                <div class="page-wrapper">
                    <!-- ============================================================== -->
                    <!-- Bread crumb and right sidebar toggle -->
                    <!-- ============================================================== -->
                    <div class="page-breadcrumb">
                        <div class="row">
                            <div class="col-12 d-flex no-block align-items-center">
                                <h4 class="page-title">
                                    <%- title %>
                                </h4>
                                <div class="ml-auto text-right">
                                    <nav aria-label="breadcrumb">
                                        <ol class="breadcrumb">
                                            <li class="breadcrumb-item"><a href="#">Home</a></li>
                                            <li class="breadcrumb-item active" aria-current="page">
                                                <%- title %>
                                            </li>
                                        </ol>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- ============================================================== -->
                    <!-- End Bread crumb and right sidebar toggle -->
                    <!-- ============================================================== -->
                    <!-- ============================================================== -->
                    <!-- Container fluid  -->
                    <!-- ============================================================== -->
                    <div class="container-fluid" style="background-color: #fff; ">
                        <div class="container-fluid" style="background-color: #fff; ">





                            <div class="card-body">
                                <div class="row p-b-30">
                                    <div class="col-12">


                                        <div class="card-body" id="updateEmployment_details">
                                            <!-- <h3 align="center" class="card-title">Create company</h3> -->
                                            <div style="text-align: center;">
                                                <span>
                                                    <h3>
                                                        Disclaimer and Signature
                                                    </h3>
                                                </span>
                                                <!-- <img style="width: 70%" src="images/truck_company.png" alt="homepage" class="light-logo" /> -->
                                            </div>
                                            <br>


                                            <div class="row">
                                                <div class="col-md-12">


                                                    <input type="hidden" name="company_id" id="company_id"
                                                        value="<%-company_id %>">
                                                    <input type="hidden" name="driverId" id="driverId"
                                                        value="<%-driverId %>">


                                                    <p align="justify">
                                                        I certify that my answers are true and complete to the best of
                                                        my
                                                        knowledge. If this application leads
                                                        to employment, I understand that false or misleading information
                                                        in my application or interview may
                                                        result in my release. I understand that if I am employed, any
                                                        misrepresentation or material omission
                                                        made by me on this application will be sufficient cause for
                                                        cancellation of this application or
                                                        immediate discharge from the employerâ€™s service, whenever it is
                                                        discovered. I give the employer the
                                                        right to contact and obtain information from all references,
                                                        employers, educational institutions and
                                                        to otherwise verify the accuracy of the information contained in
                                                        this application.
                                                    </p>

                                                    <p align="justify">
                                                        I certify that carrier informed me about the benefits of joining
                                                        company as Company Driver and not
                                                        joining the company as an incorporated organization, however I
                                                        preferred joining as:
                                                    </p>

                                                    <div class="form-group row">
                                                        <label for="Disclaimer_type"
                                                            class="col-sm-3 control-label col-form-label">Are you
                                                            currently working for another employer </label>
                                                        <div class="col-md-9">
                                                            <select class="form-select" name="Disclaimer_type"
                                                                id="Disclaimer_type">
                                                                <option value="">Select an one of this</option>
                                                                <option value="Company_Driver">Company Driver</option>
                                                                <option value="Incorporated_Company">Incorporated
                                                                    Company</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <p align="justify">I certify that it is my decision and company has
                                                        no involvement in taking this decision. </p>

                                                    <p align="justify">I hereby release from liability the employer and
                                                        its representatives for seeking, gathering and using
                                                        such information and all other persons, corporations or
                                                        organizations for furnishing such
                                                        information. The employer does not unlawfully discriminate in
                                                        employment and no question on this
                                                        application is used for the purpose of limiting or excusing any
                                                        applicant from consideration for
                                                        employment on a basis prohibited by local, state or federal law.
                                                    </p>
                                                    <p align="justify">If I am hired, I understand that I am free to
                                                        resign at any time, with or without cause and without
                                                        prior notice, and the employer reserves the same right to
                                                        terminate my employment at any time,
                                                        with or without cause and without prior notice, except as may be
                                                        required by law. I understand that
                                                        no representative of the employer, other than an authorized
                                                        officer, has the authority to make any
                                                        assurances to the contrary. I further understand that any such
                                                        assurances must be in writing and
                                                        signed by an authorized officer. I understand it is this
                                                        companyâ€™s policy not to refuse to hire a
                                                        qualified individual with a disability because of thatâ€™s
                                                        personâ€™s need for a reasonable
                                                        accommodation as required by the ADA. I also understand that if
                                                        I am hired, I will be required to
                                                        provide proof of identity and legal work authorization. </p>
                                                    <%if (disclaimer !="Yes" ) { %>
                                                        <b>Driverâ€™s Name (Printed)</b>: <%- driverName %><br>
                                                            <b>Drivers Signature:</b>

                                                            <% } %>
                                                                </a>
                                                                <%if (disclaimer=="Yes" ) { %>
                                                                    <div id="signatureDiv">
                                                                        <div class="row">
                                                                            <div class="col-md-3 col-xs-hidden">
                                                                            </div>
                                                                            <div style="text-align: center"
                                                                                class="col-md-6 col-xs-12">
                                                                                <label for="name"
                                                                                    class="col-md-4 control-label col-form-label"><b>Employee
                                                                                        Signature</b></label>
                                                                                <br />
                                                                                <section class="signature-component">
                                                                                    <canvas
                                                                                        style="background-color: #fff;border: 2px solid #131212;"
                                                                                        id="signature-pad" width="350"
                                                                                        height="200"></canvas>
                                                                                    <div>
                                                                                        <button id="clear"
                                                                                            class="clear">Clear
                                                                                            Signature</button>
                                                                                    </div>
                                                                                </section>

                                                                            </div>
                                                                            <div class="col-md-3 col-xs-hidden">

                                                                            </div>
                                                                        </div>

                                                                        <br />
                                                                    </div>

                                                                    <% } if(signature!=''){%>
                                                                        <img src="<%- signature %>" id="signature" alt="Driver signature will be shown here"
                                                                            width="150">
																	<% } %>
                                                                        <input type="hidden" id="driverName"
                                                                            name="driverName" value="<%- driverName %>">
                                                                        <input type="hidden" id="driverDisclaimer">
                                                                        <div>
                                                                            <input class="form-check-input" id="Iagree"
                                                                                name="Iagree" type="checkbox" value="1"
                                                                                id="flexCheckDefault Iagree">
                                                                            I certify that I have read and
                                                                            understood the above requirements.
                                                                        </div>
                                                </div>
                                            </div>

                                        </div>

                                    </div>


                                </div>



                            </div>

                        </div>



                    </div>
                    <!-- ============================================================== -->
                    <!-- End Container fluid  -->
                    <!-- ============================================================== -->
                    <!-- ============================================================== -->
                    <!-- footer -->
                    <!-- ============================================================== -->
                    <footer class="footer text-center">
                        <!-- All Rights Reserved by Matrix-admin. Designed and Developed by <a href="https://wrappixel.com">WrapPixel</a> -->
                    </footer>
                    <!-- ============================================================== -->
                    <!-- End footer -->
                    <!-- ============================================================== -->
                </div>
                <!-- ============================================================== -->
                <!-- End Page wrapper  -->
                <!-- ============================================================== -->
    </div>
    <!-- ============================================================== -->
    <!-- End Wrapper -->
    <!-- ============================================================== -->
    <!-- ============================================================== -->
    <%- include('includes/footer.ejs') %>
        <script src="assets/extra-libs/multicheck/datatable-checkbox-init.js"></script>
        <script src="assets/extra-libs/multicheck/jquery.multicheck.js"></script>
        <script src="assets/extra-libs/DataTables/datatables.min.js"></script>
        <script src="assets/libs/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
        <script>
            //   jQuery(document).ready(function () {

            // $("#toDate").on("change",function(){
            //                 $("#toDate").focusout(function() {
            //                 alert('qwwe')
            //     var selected = $(this).val();
            //     alert(selected);
            // });
            // var signature = $('.signature').signature({ syncField: '.signpad', syncFormat: 'PNG' });

            // $('.signpad').draggable();
            // $('.clear').click(function (e) {
            //     // alert('ddd');
            //     e.preventDefault();
            //     signature.signature('clear');
            //     $(".signpad").val('');
            // });
            function convertToBase64(inputfile, parms) {
                //Read File
                // alert(inputfile)
                // alert(parms)

                var selectedFile = document.getElementById(inputfile).files;
                // console.log(selectedFile);
                //Check File is not Empty
                if (selectedFile.length > 0) {
                    // Select the very first file from list
                    var fileToLoad = selectedFile[0];
                    var filesize = selectedFile[0].size;
                    if (filesize <= '2069405') {
                        // console.log(filesize);
                        // FileReader function for read the file.
                        var fileReader = new FileReader();
                        var base64;
                        // Onload of file read the file content
                        fileReader.onload = function (fileLoadedEvent) {
                            base64 = fileLoadedEvent.target.result;
                            // Print data in console
                            // console.log(parms);
                            $("#" + parms).val(base64);
                            var div = document.getElementById(parms);
                            div.innerHTML += base64;

                        };
                        // Convert data to base64
                        fileReader.readAsDataURL(fileToLoad);
                    } else {
                        Swal.fire(
                            'Too Big!',
                            'Upload image size within 2 MB.',
                            'danger'
                        )
                        return false;
                    }
                }
            }

            $(document).ready(function () {
                let company_id = $("#company_id").val();
                let driverId = $("#driverId").val();

                // alert(driverId)
                $.ajax({
                    url: "/getDisclaimer",
                    type: "GET",
                    data: { driverId: driverId, company_id: company_id },
                    success: function (data) {
                        // alert('tets')
                        // console.log(data.status);
                        if (data.status) {
                            // console.log(data);
                            if (data.Disclaimer_type == "No") {
                                $("#signatureDiv").hide();
                                $("body #Disclaimer_type [value=" + '"' + data.data.Disclaimer_type + '"' + "]").attr("selected", true);
                                $('#Iagree').attr('checked', 'checked');
                                $('#Iagree').attr('disabled', true);
                                $("#signatureDiv").hide();
                                let signaturePath = 'uploads/attachment/drivinghistoryaddressSignature/' + data.signature;
                                // alert('status true')
                                // alert(signaturePath)
                                $("body #updateEmployment_details #signature").attr("src", data.signature);
                                $("body #updateEmployment_details #driverDisclaimer").val(data.Disclaimer_type);
                            } else {
                                // alert('test')
                                $("body #Disclaimer_type [value=" + '"' + data.data.Disclaimer_type + '"' + "]").attr("selected", true);
                                $('#Iagree').attr('checked', 'checked');
                                $('#Iagree').attr('disabled', true);
                                $("#signatureDiv").hide();
                                // let signaturePath = 'uploads/attachment/disclaimerSignature/' + data.signature;
                                // $("body #updateEmployment_details #signature").attr("src", data.signature);
                                // let signaturePath = 'uploads/attachment/disclaimerSignature/' + data.signature;
                                $("body #updateEmployment_details #signature").attr("src", data.signature);
                                $("body #updateEmployment_details #driverDisclaimer").val(data.Disclaimer_type);
                            }


                        } else {
                            if (data.Disclaimer_type == "No") {

                                $("#signatureDiv").hide();
                                // let signaturePath1 = 'uploads/attachment/drivinghistoryaddressSignature/' + data.signature;
                                $("body #updateEmployment_details #signature").attr("src", data.signature);
                                // alert('status false')
                                // alert(data.signature)
                                $("body #updateEmployment_details #driverDisclaimer").val(data.Disclaimer_type);
                            }
                            $('#Iagree').show();
                            // $('body #signature').hide();
                            // $("body #updateEmployment_details #signature").attr("src", data.signature);
                            // let signaturePath2 = 'uploads/attachment/disclaimerSignature/' + data.signature;
                            // $("body #updateEmployment_details #signature").attr("src", signaturePath2);
                            $("body #updateEmployment_details #driverDisclaimer").val(data.Disclaimer_type);
                        }

                    }
                });
            })




            $('#Iagree').on('change', function () {
                if (this.checked) {
                    // alert(this.checked)
                    let company_id = $("#company_id").val();
                    let driverId = $("#driverId").val();
                    let driverName = $("#driverName").val();
                    // let Signature = $("#Signature").val();
                    let Disclaimer_type = $("#Disclaimer_type").val();
                    let driverDisclaimer = $("#driverDisclaimer").val();
                    // alert(driverDisclaimer)
                    if (driverDisclaimer == "Yes") {


                        // var signaturePad = new SignaturePad(document.getElementById('signature-pad'), {
                        //     backgroundColor: 'rgba(255, 255, 255, 0)',
                        //     penColor: 'rgb(0, 0, 0)',
                        //     velocityFilterWeight: .7,
                        //     minWidth: 0.5,
                        //     maxWidth: 2.5,
                        //     throttle: 16, // max x milli seconds on event update, OBS! this introduces lag for event update
                        //     minPointDistance: 3,
                        // });
                        // var saveButton = document.getElementById('save'),
                        //     clearButton = document.getElementById('clear'),
                        //     showPointsToggle = document.getElementById('showPointsToggle');
                        // clearButton.addEventListener('click', function (event) {
                        //     signaturePad.clear();
                        // });

                        var signpad = signaturePad.toDataURL('image/png');
                        // console.log(signpad);
                        if (driverDisclaimer == "Yes") {

                            if (signpad == "" || signpad == "undefined" || signpad == null || signpad == "0") {
                                flag = false;
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Signature requird to proceed further',
                                    icon: 'error',
                                    confirmButtonText: 'Ok'
                                })
                                return false
                            }
                        }
                    } else {
                        let signpad = ""
                    }
                    if (Disclaimer_type == "") {
                        Swal.fire({
                            title: 'Validation!',
                            text: 'Please select the select box',
                            icon: 'error',
                            confirmButtonText: 'Cool'
                        })
                        $('#Iagree').prop('checked', false); // Unchecks it
                        // window.location = "/";
                        return false
                    }

                    $.ajax({
                        url: "/addDisclaimer",
                        type: "POST",
                        data: { company_id: company_id, driverId: driverId, Disclaimer_type: Disclaimer_type, driverName: driverName, signature: signpad },
                        success: function (data) {
                            // console.log(data.data);
                            if (data.status) {
                                const Toast = Swal.mixin({
                                    toast: true,
                                    position: 'top-end',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                                Toast.fire({
                                    icon: 'success',
                                    title: data.message
                                });
                                if (driverDisclaimer == "Yes") {
                                    setTimeout(function () {
                                        //window.location.reload();
                                        window.location = "/logout";
                                    }, 2000);
                                }
                                else{
                                    window.location.reload();
                                }

                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Something went wrong',
                                    icon: 'error',
                                    confirmButtonText: 'Cool'
                                })
                                // window.location = "/";
                            }

                        }
                    });
                } else {
                    // $("#ifbelowthreeYears").hide();
                    // alert('un checked')
                    alert(this.checked)
                }

            })

        </script>
        <script src="sweetAlert/sweetalert2.min.js"></script>


        <script>


            /*!
 * Modified
 * Signature Pad v1.5.3
 * https://github.com/szimek/signature_pad
 *
 * Copyright 2016 Szymon Nowak
 * Released under the MIT license
 */
            var SignaturePad = (function (document) {
                "use strict";

                var log = console.log.bind(console);

                var SignaturePad = function (canvas, options) {
                    var self = this,
                        opts = options || {};

                    this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;
                    this.minWidth = opts.minWidth || 0.5;
                    this.maxWidth = opts.maxWidth || 2.5;
                    this.dotSize = opts.dotSize || function () {
                        return (self.minWidth + self.maxWidth) / 2;
                    };
                    this.penColor = opts.penColor || "black";
                    this.backgroundColor = opts.backgroundColor || "rgba(0,0,0,0)";
                    this.throttle = opts.throttle || 0;
                    this.throttleOptions = {
                        leading: true,
                        trailing: true
                    };
                    this.minPointDistance = opts.minPointDistance || 0;
                    this.onEnd = opts.onEnd;
                    this.onBegin = opts.onBegin;

                    this._canvas = canvas;
                    this._ctx = canvas.getContext("2d");
                    this._ctx.lineCap = 'round';
                    this.clear();

                    // we need add these inline so they are available to unbind while still having
                    //  access to 'self' we could use _.bind but it's not worth adding a dependency
                    this._handleMouseDown = function (event) {
                        if (event.which === 1) {
                            self._mouseButtonDown = true;
                            self._strokeBegin(event);
                        }
                    };

                    var _handleMouseMove = function (event) {
                        event.preventDefault();
                        if (self._mouseButtonDown) {
                            self._strokeUpdate(event);
                            if (self.arePointsDisplayed) {
                                var point = self._createPoint(event);
                                self._drawMark(point.x, point.y, 5);
                            }
                        }
                    };

                    // this._handleMouseMove = _.throttle(_handleMouseMove, self.throttle, self.throttleOptions);
                    this._handleMouseMove = _handleMouseMove;

                    this._handleMouseUp = function (event) {
                        if (event.which === 1 && self._mouseButtonDown) {
                            self._mouseButtonDown = false;
                            self._strokeEnd(event);
                        }
                    };

                    this._handleTouchStart = function (event) {
                        if (event.targetTouches.length == 1) {
                            var touch = event.changedTouches[0];
                            self._strokeBegin(touch);
                        }
                    };

                    var _handleTouchMove = function (event) {
                        // Prevent scrolling.
                        event.preventDefault();

                        var touch = event.targetTouches[0];
                        self._strokeUpdate(touch);
                        if (self.arePointsDisplayed) {
                            var point = self._createPoint(touch);
                            self._drawMark(point.x, point.y, 5);
                        }
                    };
                    // this._handleTouchMove = _.throttle(_handleTouchMove, self.throttle, self.throttleOptions);
                    this._handleTouchMove = _handleTouchMove;

                    this._handleTouchEnd = function (event) {
                        var wasCanvasTouched = event.target === self._canvas;
                        if (wasCanvasTouched) {
                            event.preventDefault();
                            self._strokeEnd(event);
                        }
                    };

                    this._handleMouseEvents();
                    this._handleTouchEvents();
                };

                SignaturePad.prototype.clear = function () {
                    var ctx = this._ctx,
                        canvas = this._canvas;

                    ctx.fillStyle = this.backgroundColor;
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    this._reset();
                };

                // SignaturePad.prototype.showPointsToggle = function() {
                //     this.arePointsDisplayed = !this.arePointsDisplayed;
                // };

                SignaturePad.prototype.toDataURL = function (imageType, quality) {
                    var canvas = this._canvas;
                    return canvas.toDataURL.apply(canvas, arguments);
                };

                SignaturePad.prototype.fromDataURL = function (dataUrl) {
                    var self = this,
                        image = new Image(),
                        ratio = window.devicePixelRatio || 1,
                        width = this._canvas.width / ratio,
                        height = this._canvas.height / ratio;

                    this._reset();
                    image.src = dataUrl;
                    image.onload = function () {
                        self._ctx.drawImage(image, 0, 0, width, height);
                    };
                    this._isEmpty = false;
                };

                SignaturePad.prototype._strokeUpdate = function (event) {
                    var point = this._createPoint(event);
                    if (this._isPointToBeUsed(point)) {
                        this._addPoint(point);
                    }
                };

                var pointsSkippedFromBeingAdded = 0;
                SignaturePad.prototype._isPointToBeUsed = function (point) {
                    // Simplifying, De-noise
                    if (!this.minPointDistance)
                        return true;

                    var points = this.points;
                    if (points && points.length) {
                        var lastPoint = points[points.length - 1];
                        if (point.distanceTo(lastPoint) < this.minPointDistance) {
                            // log(++pointsSkippedFromBeingAdded);
                            return false;
                        }
                    }
                    return true;
                };

                SignaturePad.prototype._strokeBegin = function (event) {
                    this._reset();
                    this._strokeUpdate(event);
                    if (typeof this.onBegin === 'function') {
                        this.onBegin(event);
                    }
                };

                SignaturePad.prototype._strokeDraw = function (point) {
                    var ctx = this._ctx,
                        dotSize = typeof (this.dotSize) === 'function' ? this.dotSize() : this.dotSize;

                    ctx.beginPath();
                    this._drawPoint(point.x, point.y, dotSize);
                    ctx.closePath();
                    ctx.fill();
                };

                SignaturePad.prototype._strokeEnd = function (event) {
                    var canDrawCurve = this.points.length > 2,
                        point = this.points[0];

                    if (!canDrawCurve && point) {
                        this._strokeDraw(point);
                    }
                    if (typeof this.onEnd === 'function') {
                        this.onEnd(event);
                    }
                };

                SignaturePad.prototype._handleMouseEvents = function () {
                    this._mouseButtonDown = false;

                    this._canvas.addEventListener("mousedown", this._handleMouseDown);
                    this._canvas.addEventListener("mousemove", this._handleMouseMove);
                    document.addEventListener("mouseup", this._handleMouseUp);
                };

                SignaturePad.prototype._handleTouchEvents = function () {
                    // Pass touch events to canvas element on mobile IE11 and Edge.
                    this._canvas.style.msTouchAction = 'none';
                    this._canvas.style.touchAction = 'none';

                    this._canvas.addEventListener("touchstart", this._handleTouchStart);
                    this._canvas.addEventListener("touchmove", this._handleTouchMove);
                    this._canvas.addEventListener("touchend", this._handleTouchEnd);
                };

                SignaturePad.prototype.on = function () {
                    this._handleMouseEvents();
                    this._handleTouchEvents();
                };

                SignaturePad.prototype.off = function () {
                    this._canvas.removeEventListener("mousedown", this._handleMouseDown);
                    this._canvas.removeEventListener("mousemove", this._handleMouseMove);
                    document.removeEventListener("mouseup", this._handleMouseUp);

                    this._canvas.removeEventListener("touchstart", this._handleTouchStart);
                    this._canvas.removeEventListener("touchmove", this._handleTouchMove);
                    this._canvas.removeEventListener("touchend", this._handleTouchEnd);
                };

                SignaturePad.prototype.isEmpty = function () {
                    return this._isEmpty;
                };

                SignaturePad.prototype._reset = function () {
                    this.points = [];
                    this._lastVelocity = 0;
                    this._lastWidth = (this.minWidth + this.maxWidth) / 2;
                    this._isEmpty = true;
                    this._ctx.fillStyle = this.penColor;
                };

                SignaturePad.prototype._createPoint = function (event) {
                    var rect = this._canvas.getBoundingClientRect();
                    return new Point(
                        event.clientX - rect.left,
                        event.clientY - rect.top
                    );
                };

                SignaturePad.prototype._addPoint = function (point) {
                    var points = this.points,
                        c2, c3,
                        curve, tmp;

                    points.push(point);

                    if (points.length > 2) {
                        // To reduce the initial lag make it work with 3 points
                        // by copying the first point to the beginning.
                        if (points.length === 3) points.unshift(points[0]);

                        tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);
                        c2 = tmp.c2;
                        tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);
                        c3 = tmp.c1;
                        curve = new Bezier(points[1], c2, c3, points[2]);
                        this._addCurve(curve);

                        // Remove the first element from the list,
                        // so that we always have no more than 4 points in points array.
                        points.shift();
                    }
                };

                SignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {
                    var dx1 = s1.x - s2.x,
                        dy1 = s1.y - s2.y,
                        dx2 = s2.x - s3.x,
                        dy2 = s2.y - s3.y,

                        m1 = {
                            x: (s1.x + s2.x) / 2.0,
                            y: (s1.y + s2.y) / 2.0
                        },
                        m2 = {
                            x: (s2.x + s3.x) / 2.0,
                            y: (s2.y + s3.y) / 2.0
                        },

                        l1 = Math.sqrt(1.0 * dx1 * dx1 + dy1 * dy1),
                        l2 = Math.sqrt(1.0 * dx2 * dx2 + dy2 * dy2),

                        dxm = (m1.x - m2.x),
                        dym = (m1.y - m2.y),

                        k = l2 / (l1 + l2),
                        cm = {
                            x: m2.x + dxm * k,
                            y: m2.y + dym * k
                        },

                        tx = s2.x - cm.x,
                        ty = s2.y - cm.y;

                    return {
                        c1: new Point(m1.x + tx, m1.y + ty),
                        c2: new Point(m2.x + tx, m2.y + ty)
                    };
                };

                SignaturePad.prototype._addCurve = function (curve) {
                    var startPoint = curve.startPoint,
                        endPoint = curve.endPoint,
                        velocity, newWidth;

                    velocity = endPoint.velocityFrom(startPoint);
                    velocity = this.velocityFilterWeight * velocity +
                        (1 - this.velocityFilterWeight) * this._lastVelocity;

                    newWidth = this._strokeWidth(velocity);
                    this._drawCurve(curve, this._lastWidth, newWidth);

                    this._lastVelocity = velocity;
                    this._lastWidth = newWidth;
                };

                SignaturePad.prototype._drawPoint = function (x, y, size) {
                    var ctx = this._ctx;

                    ctx.moveTo(x, y);
                    ctx.arc(x, y, size, 0, 2 * Math.PI, false);
                    this._isEmpty = false;
                };

                SignaturePad.prototype._drawMark = function (x, y, size) {
                    var ctx = this._ctx;

                    ctx.save();
                    ctx.moveTo(x, y);
                    ctx.arc(x, y, size, 0, 2 * Math.PI, false);
                    ctx.fillStyle = 'rgba(255, 0, 0, 0.2)';
                    ctx.fill();
                    ctx.restore();
                };

                SignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {
                    var ctx = this._ctx,
                        widthDelta = endWidth - startWidth,
                        drawSteps, width, i, t, tt, ttt, u, uu, uuu, x, y;

                    drawSteps = Math.floor(curve.length());
                    ctx.beginPath();
                    for (i = 0; i < drawSteps; i++) {
                        // Calculate the Bezier (x, y) coordinate for this step.
                        t = i / drawSteps;
                        tt = t * t;
                        ttt = tt * t;
                        u = 1 - t;
                        uu = u * u;
                        uuu = uu * u;

                        x = uuu * curve.startPoint.x;
                        x += 3 * uu * t * curve.control1.x;
                        x += 3 * u * tt * curve.control2.x;
                        x += ttt * curve.endPoint.x;

                        y = uuu * curve.startPoint.y;
                        y += 3 * uu * t * curve.control1.y;
                        y += 3 * u * tt * curve.control2.y;
                        y += ttt * curve.endPoint.y;

                        width = startWidth + ttt * widthDelta;
                        this._drawPoint(x, y, width);
                    }
                    ctx.closePath();
                    ctx.fill();
                };

                SignaturePad.prototype._strokeWidth = function (velocity) {
                    return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
                };

                var Point = function (x, y, time) {
                    this.x = x;
                    this.y = y;
                    this.time = time || new Date().getTime();
                };

                Point.prototype.velocityFrom = function (start) {
                    return (this.time !== start.time) ? this.distanceTo(start) / (this.time - start.time) : 1;
                };

                Point.prototype.distanceTo = function (start) {
                    return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
                };

                var Bezier = function (startPoint, control1, control2, endPoint) {
                    this.startPoint = startPoint;
                    this.control1 = control1;
                    this.control2 = control2;
                    this.endPoint = endPoint;
                };

                // Returns approximated length.
                Bezier.prototype.length = function () {
                    var steps = 10,
                        length = 0,
                        i, t, cx, cy, px, py, xdiff, ydiff;

                    for (i = 0; i <= steps; i++) {
                        t = i / steps;
                        cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
                        cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
                        if (i > 0) {
                            xdiff = cx - px;
                            ydiff = cy - py;
                            length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
                        }
                        px = cx;
                        py = cy;
                    }
                    return length;
                };

                Bezier.prototype._point = function (t, start, c1, c2, end) {
                    return start * (1.0 - t) * (1.0 - t) * (1.0 - t) +
                        3.0 * c1 * (1.0 - t) * (1.0 - t) * t +
                        3.0 * c2 * (1.0 - t) * t * t +
                        end * t * t * t;
                };

                return SignaturePad;
            })(document);

            var signaturePad = new SignaturePad(document.getElementById('signature-pad'), {
                backgroundColor: 'rgba(255, 255, 255, 0)',
                penColor: 'rgb(0, 0, 0)',
                velocityFilterWeight: .7,
                minWidth: 0.5,
                maxWidth: 2.5,
                throttle: 16, // max x milli seconds on event update, OBS! this introduces lag for event update
                minPointDistance: 3,
            });
            var saveButton = document.getElementById('save'),
                clearButton = document.getElementById('clear'),
                showPointsToggle = document.getElementById('showPointsToggle');

            // saveButton.addEventListener('click', function(event) {
            //     var data = signaturePad.toDataURL('image/png');
            //     window.open(data);
            // });
            clearButton.addEventListener('click', function (event) {
                signaturePad.clear();
            });
// showPointsToggle.addEventListener('click', function(event) {
//     signaturePad.showPointsToggle();
//     showPointsToggle.classList.toggle('toggle');
// });





        </script>

</body>

</html>